class Solution {
public:
    int score(vector<int>&v,vector<int>&sum,int i,int j,int dp[][500]){
        
        if(i>=j){
            return 0;
        }
            
        
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
            
        
        int s=INT_MIN;
        for(int k=i;k<j;k++){
            int lsum=sum[k]-(i==0?0:sum[i-1]);
            int rsum=sum[j]-sum[k];
            int ans;
            if(lsum>rsum)
                ans=rsum+score(v,sum,k+1,j,dp);
            else if(rsum>lsum)
                ans=lsum+score(v,sum,i,k,dp);
            else
                ans=lsum+max(score(v,sum,i,k,dp),score(v,sum,k+1,j,dp));
            s=max(s,ans);
        }
        
        dp[i][j]=s;
        return s;
    }
    
    int stoneGameV(vector<int>& v) {
        int n=v.size();
        
        if(n==1)
            return 0;
        
        vector<int>sum;
        
        int t=0;
        for(int i=0;i<n;i++){
            t+=v[i];
            sum.push_back(t);
        }
        
        int dp[500][500];
        
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                dp[i][j]=-1;
            
        
        int sol=score(v,sum,0,n-1,dp);
        
        return sol;
    }
};